sbit LCD_RS at RE2_bit;
sbit LCD_EN at RE1_bit;
sbit LCD_D0 at RD0_bit;
sbit LCD_D1 at RD1_bit;
sbit LCD_D2 at RD2_bit;
sbit LCD_D3 at RD3_bit;
sbit LCD_D4 at RD4_bit;
sbit LCD_D5 at RD5_bit;
sbit LCD_D6 at RD6_bit;
sbit LCD_D7 at RD7_bit;                            // Intialising the LCD screen

sbit LCD_RS_Direction at TRISE2_bit;
sbit LCD_EN_Direction at TRISE1_bit;
sbit LCD_D0_Direction at TRISD0_bit;
sbit LCD_D1_Direction at TRISD1_bit;
sbit LCD_D2_Direction at TRISD2_bit;
sbit LCD_D3_Direction at TRISD3_bit;
sbit LCD_D4_Direction at TRISD4_bit;
sbit LCD_D5_Direction at TRISD5_bit;
sbit LCD_D6_Direction at TRISD6_bit;
sbit LCD_D7_Direction at TRISD7_bit;               // Intialising the LCD screen

int temp;                                    //  Intialising the temp is integar
char temp_out[5];                        //  Intialising the  temp_out character
int LL=25;                                     //  Intialising the LL is integar
char LL_out[5];                            //  Intialising the  LL_out character
int UL=50;                                     //  Intialising the UL is integar
char UL_out[5];                            //  Intialising the  UL_out character

void main() {                                            // the begining of loop

 ADC_Init();                                             //  Intialising the ADC
 Lcd_Init();                                             //  Intialising the LCD

 ANSELA=0xff;                       // all the bits in port A is set to analogue
 TRISA=0xff;                          // it set all the bits port A to be inputs

 ANSELB=0;                          // all the bits in port B is set to  digital
 TRISB=0xff;                          // it set all the bits port B to be inputs

 ANSELC=0;                          // all the bits in port C is set to  digital
 TRISC=0;                            // it set all the bits port C to be outputs

 Lcd_Cmd(_LCD_CLEAR);                                           // it clears lcd
 Lcd_Cmd(_LCD_CURSOR_OFF);                                // it turns off cursor
 Lcd_Out(1,1, "Temp:");      // shows the word "temp" in the position 1,1 on LCD
 Lcd_Out(2,1, "LL:");          // shows the word "LL" in the position 2,1 on LCD
 Lcd_Out(2,8, "UL:");          // shows the word "UL" in the position 2,8 on LCD

 while(1) {                                                        // while loop

    temp=ADC_Read(2);                         // reads the temp from ADC pin RA2
    temp=temp*5/10;                          // manual tuning to get actual temp

    sprintf(temp_out,"%d",temp);                   // converts integar to string
    Lcd_Out(1,7, temp_out);                         // so lcd can print temp_out
    sprintf(LL_out,"%d",LL);                       // converts integar to string
    Lcd_Out(2,5, LL_out);                           // so lcd can print LL_out
    sprintf(UL_out,"%d",UL);                       // converts integar to string
    Lcd_Out(2,12, UL_out);                            // so lcd can print UL_out

    if (PORTB.RB4==1) {                                         // If condition
       LL=LL+1;               // so if button RB4 is pressed it will add 1 to LL
    }
    if (PORTB.RB3==1) {                                          // If condition
       LL=LL-1;          // so if button RB3 is pressed it will subtract 1 to LL
    }
    if (PORTB.RB1==1) {                                          // If condition
       UL=UL+1;               // so if button RB1 is pressed it will add 1 to UL
    }
    if (PORTB.RB2==1) {                                          // If condition
       UL=UL-1;          // so if button RB2 is pressed it will subtract 1 to UL
    }

    if (temp>UL) {                      // If condition temp is greater than UL
       PORTC.RC1=1;                       // PORTC.RC1=1 means the buzzer is on
       PORTC.RC2=1;                       // PORTC.RC2=1 means the cooler is on
       PORTC.RC5=0;                      // PORTC.RC5=0 means the heater is off
    }
    else if (temp<LL) {             //else if condition  temp is samller than LL
       PORTC.RC1=1;                        // PORTC.RC1=1 means the buzzer is on
       PORTC.RC2=0;                       // PORTC.RC2=0 means the cooler is off
       PORTC.RC5=1;                        // PORTC.RC5=1 means the heater is on
    }
    else {                                                               // else
       PORTC.RC1=0;                        // PORTC.RC1=0means the buzzer is off
       PORTC.RC2=0;                       // PORTC.RC2=0 means the cooler is off
       PORTC.RC5=0;                       // PORTC.RC5=0 means the heater is off
    }
      Delay_ms(100);                                   // delay 100 mili seconds
    }

}